float lcg_random(unsigned int *seed) {
    const unsigned int a = 1664525u;
    const unsigned int c = 1013904223u;
    *seed = a * (*seed) + c;
    return (float)(*seed) / 4294967296.0f;
}

__kernel void initialize_particles_sphere(
    __global float4* positions,
    __global float4* velocities,
    __global float4* accelerations,
    const unsigned int n_particles,
    const float radius) {
    int i = get_global_id(0);
    if (i < n_particles) {
        unsigned int seed = i;
        float theta = 2.0f * M_PI * lcg_random(&seed);
        float phi = acos(2.0f * lcg_random(&seed) - 1.0f);
        float r = radius * cbrt(lcg_random(&seed)); // Cube root for even distribution
        positions[i] = (float4)(r * sin(phi) * cos(theta), r * sin(phi) * sin(theta), r * cos(phi), 1.0f);
        velocities[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f); // Initial velocity
        accelerations[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f); // Initial acceleration
    }
}

__kernel void initialize_particles_cube(
    __global float4* positions,
    __global float4* velocities,
    __global float4* accelerations,
    const unsigned int n_particles) {
    int i = get_global_id(0);
    if (i < n_particles) {
        unsigned int seed = i;

        float x = lcg_random(&seed) - 0.5f;
        float y = lcg_random(&seed) - 0.5f;
        float z = lcg_random(&seed) - 0.5f;

        positions[i] = (float4)(x, y, z, 1.0f);
        velocities[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
        accelerations[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
    }
}

__kernel void update_particles(
    __global float4* positions,
    __global float4* velocities,
    __global float4* accelerations,
    const unsigned int n_particles,
    const float dt) {
    int gid = get_global_id(0);
    if (gid < n_particles) {
        // Update velocity and position based on acceleration
        velocities[gid] += accelerations[gid] * dt;
        velocities[gid] *= 0.9f; // Damping factor
        positions[gid] += velocities[gid] * dt;
    }
}


__kernel void attractor(
    __global float4* positions,
    __global float4* velocities,
    __global float4* accelerations,
    const float4 attractor,
    const unsigned int n_particles,
    const float dt) {
    int gid = get_global_id(0);
    if (gid < n_particles) {
        float4 direction = attractor - positions[gid];
        float4 force =  normalize(direction) * 0.05f;
        accelerations[gid] += force;
    }
}

