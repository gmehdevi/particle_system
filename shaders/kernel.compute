float lcg_random(unsigned int *seed) {
    const unsigned int a = 1664525u;
    const unsigned int c = 1013904223u;
    *seed = a * (*seed) + c;
    return (float)(*seed) / 4294967296.0f;
}


__kernel void update_particles(__global float4* particles, __global float4* velocities, __global float4* accelerations, float4 attractor, const float dt, const unsigned int num_particles) {
    int i = get_global_id(0);

    if (i < num_particles && attractor.w == 1.0f) {
        float4 diff = attractor - particles[i];
        float dist = length(diff);
        if (dist < 0.1f) dist = 0.1f; // Avoid division by very small numbers
        float4 dir = normalize(diff); // Normalization after checking distance
        float acceleration = 1.0f / dist;
        accelerations[i] = dir * acceleration;
    }

    velocities[i] += accelerations[i] * dt;
    particles[i] += velocities[i] * dt;
}

__kernel void initialize_particles_cube(__global float4* particles, __global float4* velocities, __global float4* accelerations, const unsigned int num_particles) {
    int i = get_global_id(0);
    if (i < num_particles) {
        unsigned int seed = i;  // Unique seed for each particle

        // Generate random positions within the range [-0.5, 0.5]
        float x = lcg_random(&seed) - 0.5f;
        float y = lcg_random(&seed) - 0.5f;
        float z = lcg_random(&seed) - 0.5f;

        // Assign positions and initial velocities and accelerations
        particles[i] = (float4)(x, y, z, 1.0f);
        velocities[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
        accelerations[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
    }
}


__kernel void initialize_particles_sphere(__global float4* particles, __global float4* velocities, __global float4* accelerations, const unsigned int num_particles) {
    int i = get_global_id(0);
    if (i < num_particles) {
        unsigned int seed = i;
        float theta = 2.0f * M_PI * lcg_random(&seed);
        float phi = acos(2.0f * lcg_random(&seed) - 1.0f);
        float r = 0.5f * cbrt((float)lcg_random(&seed));

        particles[i] = (float4)(r * sin(phi) * cos(theta), r * sin(phi) * sin(theta), r * cos(phi), 1.0f);
        velocities[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
        accelerations[i] = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
    }
}